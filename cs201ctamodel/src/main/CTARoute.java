package main;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class CTARoute {
	
	private String name;
	private List<CTAStop> stops;

	public CTARoute(){
		this.name = "Blank Route";
		this.stops = new ArrayList<CTAStop>();
	}
	
	public CTARoute(String name, List<CTAStop> stops){
		this.name = name;
		this.stops = stops;
	}
	
	public CTARoute(String name, File stopsFile){
		this.name = name;
		this.stops = new ArrayList<CTAStop>();
		try{
			Scanner scan = new Scanner(stopsFile);
			while(scan.hasNextLine()){
				String nextLine = scan.nextLine();
				String[] lineData = nextLine.split(",");
				this.stops.add(new CTAStop(lineData));
			}
			scan.close();
		}
		catch(Exception e){
			System.out.println("Encountered Exception: " + e);
		}
	}
	
	public static void main(String[] args) {
		File file = new File("greenLineStops.txt");
		CTARoute greenLine = new CTARoute("CTA Green Line", file); 
		System.out.println(greenLine);
	}
	
	public void addStation(CTAStop station){
		this.stops.add(station);
		System.out.println("Added: " + station);
	}
	
	public void removeStation(CTAStop station){
		if(this.stops.remove(station)){
			System.out.println("Removed: " + station);
		}
		else{
			System.out.println("Could Not Find: " + station);
		}
	}
	public void removeStation(String stationName){
		CTAStop target = null;
		for(CTAStop station : this.stops){
			if(station.getName().equals(stationName)){
				target = station;
			}
		}
		/*
		 * I have to remove the targeted station down here because trying
		 * to remove it while iterating through the list causes a
		 * ConcurrentModificationException. S/O link below.
		 * http://stackoverflow.com/questions/18448671/how-to-avoid-concurrentmodificationexception-while-removing-elements-from-arr
		 */
		this.stops.remove(target);
	}	
	public void insertStation(int index, CTAStop station){
		this.stops.add(index, station);
		System.out.println("Inserted at " + index + ": " + station);
	}

	public void insertAfterStation(String afterThis, CTAStop station){
		int index = 0;
		for(int s = 0; s < this.stops.size(); s++){
			if(this.stops.get(s).getName().equals(afterThis)){
				index = s + 1;
			}
		}
		insertStation(index, station);
	}
	
	public void insertBeforeStation(String beforeThis, CTAStop station){
		int index = 0;
		for(int s = 0; s < this.stops.size(); s++){
			if(this.stops.get(s).getName().equals(beforeThis)){
				index = s;
			}
		}
		insertStation(index, station);
	}
	
	public CTAStop lookupStation(String name){
		CTAStop response = null;
		for(CTAStop station : this.stops){
			if(station.getName().equals(name)){
				response = station;
			}
		}
		if(response == null){
			response = new CTAStop();
			System.out.println("Could not find station named " + name);
		}
		return response;
	}

	public CTAStop nearestStation(double lat, double lon){
		//Populate temporary ArrayList
		List<CTAStop> stopsList = new ArrayList<CTAStop>();
		stopsList.addAll(this.stops);
		//Find Closest Stop
		CTAStop response = null;
		GPSLocation location = new GPSLocation("Search Location", lat, lon);
		LocationComparator locationComparator = new LocationComparator(location);
		Collections.sort(stopsList, locationComparator);
		response = stopsList.get(0);
		return response;
	}
	
	@Override
	public String toString() {
		String representation = "Route Name: " + this.name;
		for(CTAStop stop : this.stops){
			representation += "\n" + stop;
		}
		return representation;
	}

	@Override
	//Generated by Eclipse
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((stops == null) ? 0 : stops.hashCode());
		return result;
	}

	@Override
	//Generated by Eclipse
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		CTARoute other = (CTARoute) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (stops == null) {
			if (other.stops != null)
				return false;
		} else if (!stops.equals(other.stops))
			return false;
		return true;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<CTAStop> getStops() {
		return stops;
	}

	public void setStops(List<CTAStop> stops) {
		this.stops = stops;
	}

}